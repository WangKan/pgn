工程划分原则
*满足跨平台需求。
*最大程度复用代码。



接口与实现

各平台有各自的API，为了最大程度的复用代码，我们要统一底层API，为上层程序提供统一的接口。这样，上层程序只需要用统一的接口编写一遍。

接口定义在Include/PGN文件夹里。接口的实现在Source文件夹里。将定义接口的头文件与实现接口的工程分开，是因为一个接口可以有多个实现，如果将定义接口的头文件放在工程里，当有多个工程实现同一套接口时，定义接口的头文件就会有多分拷贝，给维护带来麻烦。

不要在同一个文件中用#ifdef这种方式来实现不同平台的代码。为各平台单独创建工程，将各平台的代码写在它们各自的工程里。



Platform接口

我们把PC、iOS设备和PSV称作平台。一个平台对应一个操作系统（PC特指运行Windows操作系统的个人电脑）。Platform接口统一了各操作系统API。

功能主要包括
*整页地分配内存。
*时间相关的功能。
*线程相关的功能。

实现了Platform接口的工程
*Win32――PC上的实现。
*iOS――iOS设备上的实现。
*PSV――PSV上的实现。



Math接口

很多数学方法都能用SIMD指令进行优化。不同的CPU支持不同的SIMD指令，这与操作系统无关，所以Math接口没有和Platform接口放在一起。

实现了Math接口的工程
*MathC――C语言实现。
*SSE――SSE/AVX实现。（计划中）
*NEON――NEON实现。（计划中）



RenderingSystem接口

统一的图形接口。有多个平台支持同一种图形API的情况，所以RenderingSystem接口没有和Platform接口放在一起。

实现了RenderingSystem接口的工程
*GL――OpenGL实现，适用于PC和iOS设备。
*GXM――适用于PSV的GXM实现。



Graphics库

用RenderingSystem接口实现的图形库。



Utilities库

所有客户端与服务器公用的代码都可以写在这个库里。